var documenterSearchIndex = {"docs":
[{"location":"#Pingouin.jl-Documentation","page":"Pingouin.jl Documentation","title":"Pingouin.jl Documentation","text":"","category":"section"},{"location":"","page":"Pingouin.jl Documentation","title":"Pingouin.jl Documentation","text":"Modules = [Pingouin]\nPages   = [\"bayesian.jl\", \"datasets.jl\", \"distributions.jl\"]","category":"page"},{"location":"#Pingouin.bayesfactor_binom","page":"Pingouin.jl Documentation","title":"Pingouin.bayesfactor_binom","text":"Bayes factor of a binomial test with :math:k successes, :math:n trials and base probability :math:p.\n\nParameters\n\nk : int     Number of successes. n : int     Number of trials. p : float     Base probability of success (range from 0 to 1).\n\nReturns\n\nbinom_bf : float     The Bayes Factor quantifies the evidence in favour of the     alternative hypothesis, where the null hypothesis is that     the random variable is binomially distributed with base probability     :math:p.\n\nSee also\n\nbayesfactorpearson : Bayes Factor of a correlation bayesfactorttest : Bayes Factor of a T-test\n\nNotes\n\nAdapted from a Matlab code found at https://github.com/anne-urai/Tools/blob/master/stats/BayesFactors/binombf.m The Bayes Factor is given by the formula below: .. math::     BF{10} = \\frac{\\int0^1 \\binom{n}{k}g^k(1-g)^{n-k}}     {\\binom{n}{k} p^k (1-p)^{n-k}}\n\nReferences\n\nhttp://pcl.missouri.edu/bf-binomial\nhttps://en.wikipedia.org/wiki/Bayes_factor\n\nExamples\n\nWe want to determine if a coin is fair. After tossing the coin 200 times in a row, we report 115 heads (hereafter referred to as \"successes\") and 85 tails (\"failures\"). The Bayes Factor can be easily computed using Pingouin:\n\nusing Pingouin bf = Pingouin.bayesfactor_binom(115, 200, 0.5)Note that Pingouin returns the BF-alt by default.BF-null is simply 1 / BF-altprint(\"BF-null: \", 1 / bf, \"; BF-alt: \", bf)\n\nBF-null: 1.197134330237549; BF-alt: 0.8353281455069195\n\nSince the Bayes Factor of the null hypothesis (\"the coin is fair\") is higher than the Bayes Factor of the alternative hypothesis (\"the coin is not fair\"), we can conclude that there is more evidence to support the fact that the coin is indeed fair. However, the strength of the evidence in favor of the null hypothesis (1.197) is \"barely worth mentionning\" according to Jeffreys's rule of thumb.\n\nInterestingly, a frequentist alternative to this test would give very different results. It can be performed using the SciPy.stats.binom_test function:\n\nusing SciPy pval = SciPy.stats.binom_test(115, 200, p=0.5) round.(pval, digits=5)\n\n0.04004\n\nThe binomial test rejects the null hypothesis that the coin is fair at the 5% significance level (p=0.04). Thus, whereas a frequentist hypothesis test would yield significant results at the 5% significance level, the Bayes factor does not find any evidence that the coin is unfair. Last example using a different base probability of successes\n\nbf = Pingouin.bayesfactor_binom(100, 1000, 0.1) print(\"Bayes Factor: \", round.(bf, digits=3))\n\nBayes Factor: 0.024\n\n\n\n\n\n","category":"function"},{"location":"#Pingouin.bayesfactor_pearson-Tuple{Float64,Int64}","page":"Pingouin.jl Documentation","title":"Pingouin.bayesfactor_pearson","text":"Bayes Factor of a Pearson correlation.\n\nParameters\n\nr : float     Pearson correlation coefficient. n : int     Sample size. tail : float     Tail of the alternative hypothesis. Can be 'two-sided',     'one-sided', 'greater' or 'less'. 'greater' corresponds to a     positive correlation, 'less' to a negative correlation.     If 'one-sided', the directionality is inferred based on the r     value (= 'greater' if r > 0, 'less' if r < 0). method : str     Method to compute the Bayes Factor. Can be 'ly' (default) or     'wetzels'. The former has an exact analytical solution, while the     latter requires integral solving (and is therefore slower). 'wetzels'     was the default in Pingouin <= 0.2.5. See Notes for details. kappa : float     Kappa factor. This is sometimes called the rscale parameter, and     is only used when method is 'ly'.\n\nReturns\n\nbf : float     Bayes Factor (BF10).     The Bayes Factor quantifies the evidence in favour of the alternative     hypothesis.\n\nSee also\n\ncorr : (Robust) correlation between two variables pairwisecorr : Pairwise correlation between columns of a pandas DataFrame bayesfactorttest : Bayes Factor of a T-test bayesfactor_binom : Bayes Factor of a binomial test\n\nNotes\n\nTo compute the Bayes Factor directly from the raw data, use the pingouin.corr function. The two-sided Wetzels Bayes Factor (also called JZS Bayes Factor) is calculated using the equation 13 and associated R code of [1]: .. math::     \\text{BF}{10}(n, r) = \\frac{\\sqrt{n/2}}{\\gamma(1/2)}*     \\int{0}^{\\infty}e((n-2)/2)*     log(1+g)+(-(n-1)/2)log(1+(1-r^2)g)+(-3/2)log(g)-n/2g where :math:n is the sample size, :math:r is the Pearson correlation coefficient and :math:g is is an auxiliary variable that is integrated out numerically. Since the Wetzels Bayes Factor requires solving an integral, it is slower than the analytical solution described below. The two-sided Ly Bayes Factor (also called *Jeffreys exact Bayes Factor) is calculated using equation 25 of [2]: .. math::     \\text{BF}{10;k}(n, r) = \\frac{2^{\\frac{k-2}{k}}\\sqrt{\\pi}}     {\\beta(\\frac{1}{k}, \\frac{1}{k})} \\cdot     \\frac{\\Gamma(\\frac{2+k(n-1)}{2k})}{\\Gamma(\\frac{2+nk}{2k})}     \\cdot 2F1(\\frac{n-1}{2}, \\frac{n-1}{2}, \\frac{2+nk}{2k}, r^2) The one-sided version is described in eq. 27 and 28 of Ly et al, 2016. Please take note that the one-sided test requires the mpmath <http://mpmath.org/>_ package. Results have been validated against JASP and the BayesFactor R package.\n\nReferences\n\n.. [1] Ly, A., Verhagen, J. & Wagenmakers, E.-J. Harold Jeffreys’s default    Bayes factor hypothesis tests: Explanation, extension, and    application in psychology. J. Math. Psychol. 72, 19–32 (2016). .. [2] Wetzels, R. & Wagenmakers, E.-J. A default Bayesian hypothesis test    for correlations and partial correlations. Psychon. Bull. Rev. 19,    1057–1064 (2012).\n\nExamples\n\nBayes Factor of a Pearson correlation\n\nusing Pingouin r, n = 0.6, 20 bf = Pingouin.bayesfactor_pearson(r, n) print(\"Bayes Factor: \", round.(bf, digits=3))\n\nBayes Factor: 10.634\n\nCompare to Wetzels method:\n\nbf = Pingouin.bayesfactor_pearson(r, n,\n\n                                tail=\"two-sided\",\n                                method=\"wetzels\",\n                                kappa=1.)\n\nprint(\"Bayes Factor: \", round.(bf, digits=3))\n\nBayes Factor: 8.221\n\nOne-sided test\n\nbf10pos = Pingouin.bayesfactor_pearson(r, n, \n\n                                     tail=\"one-sided\",\n                                     method=\"ly\",\n                                     kappa=1.0)\n\nbf10neg = Pingouin.bayesfactor_pearson(r, n,\n\n                                     tail=\"less\",\n                                     method=\"ly\",\n                                     kappa=1.0)\n\nprint(\"BF-pos: \", round.(bf10pos, digits=3),\" BF-neg: \", round.(bf10neg, digits=3))\n\nBF-pos: 21.185, BF-neg: 0.082\n\nWe can also only pass tail=one-sided and Pingouin will automatically infer the directionality of the test based on the r value.\n\nprint(\"BF: \", round.(bayesfactor_pearson(r, n, tail=\"one-sided\"), digits=3))\n\nBF: 21.185\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.bayesfactor_ttest","page":"Pingouin.jl Documentation","title":"Pingouin.bayesfactor_ttest","text":"Bayes Factor of a T-test.\n\nParameters\n\nt : float     T-value of the T-test nx : int     Sample size of first group ny : int     Sample size of second group (only needed in case of an independent     two-sample T-test) paired : boolean     Specify whether the two observations are related (i.e. repeated     measures) or independent. tail : string     Specify whether the test is 'one-sided' or 'two-sided'. Can also be     'greater' or 'less' to specify the direction of the test.     .. warning:: One-sided Bayes Factor (BF) are simply obtained by         doubling the two-sided BF, which is not exactly the same behavior         as R or JASP. Be extra careful when interpretating one-sided BF,         and if you can, always double-check your results. r : float     Cauchy scale factor. Smaller values of r (e.g. 0.5), may be     appropriate when small effect sizes are expected a priori; larger     values of r are appropriate when large effect sizes are     expected (Rouder et al 2009). The default is     :math:\\sqrt{2} / 2 \\approx 0.707.\n\nReturns\n\nbf : float     Scaled Jeffrey-Zellner-Siow (JZS) Bayes Factor (BF10).     The Bayes Factor quantifies the evidence in favour of the     alternative hypothesis.\n\nSee also\n\nttest : T-test pairwisettest : Pairwise T-tests bayesfactorpearson : Bayes Factor of a correlation bayesfactor_binom : Bayes Factor of a binomial test\n\nNotes\n\nAdapted from a Matlab code found at https://github.com/anne-urai/Tools/tree/master/stats/BayesFactors If you would like to compute the Bayes Factor directly from the raw data instead of from the T-value, use the :py:func:pingouin.ttest function. The JZS Bayes Factor is approximated using the formula described in ref [1]: .. math::     \\text{BF}{10} = \\frac{\\int_{0}^{\\infty}(1 + Ngr^2)^{-1/2}     (1 + \\frac{t^2}{v(1 + Ngr^2)})^{-(v+1) / 2}(2\\pi)^{-1/2}g^     {-3/2}e^{-1/2g}}{(1 + \\frac{t^2}{v})^{-(v+1) / 2}} where :math:t is the T-value, :math:v the degrees of freedom, :math:N the sample size, :math:r the Cauchy scale factor (= prior on effect size) and :math:g is is an auxiliary variable that is integrated out numerically. Results have been validated against JASP and the BayesFactor R package.\n\nReferences\n\n.. [1] Rouder, J.N., Speckman, P.L., Sun, D., Morey, R.D., Iverson, G.,\n\nBayesian t tests for accepting and rejecting the null hypothesis.\n\nPsychon. Bull. Rev. 16, 225–237. https://doi.org/10.3758/PBR.16.2.225\n\nExamples\n\nBayes Factor of an independent two-sample T-test\n\nbf = Pingouin.bayesfactor_ttest(3.5, 20, 20) print(\"Bayes Factor: \", round.(bf, digits=3), \"(two-sample independent)\")\n\nBayes Factor: 26.743 (two-sample independent)\n\nBayes Factor of a paired two-sample T-test\n\nbf = Pingouin.bayesfactor_ttest(3.5, 20, 20, paired=true) print(\"Bayes Factor: \", round.(bf, digits=3), \"(two-sample paired)\")\n\nBayes Factor: 17.185 (two-sample paired)\n\nBayes Factor of an one-sided one-sample T-test\n\nbf = Pingouin.bayesfactor_ttest(3.5, 20, tail=\"one-sided\") print(\"Bayes Factor: \", round.(bf, digits=3), \"(one-sample)\")\n\nBayes Factor: 34.369 (one-sample)\n\nNow specifying the direction of the test\n\ntval = -3.5 bfgreater = Pingouin.bayesfactorttest(tval, 20, tail=\"greater\") bfless = Pingouin.bayesfactorttest(tval, 20, tail=\"less\") print(\"BF10-greater: \", round.(bfgreater, digits=3), \" | BF10-less: \", round.(bfless, digits=3))\n\nBF10-greater: 0.029 | BF10-less: 34.369\n\n\n\n\n\n","category":"function"},{"location":"#Pingouin.list_dataset-Tuple{}","page":"Pingouin.jl Documentation","title":"Pingouin.list_dataset","text":"List available example datasets.\n\nReturns\n\ndatasets : DataFrame     A dataframe with the name, description and reference of all the     datasets included in Pingouin.\n\nExamples\n\nalldatasets = Pingouin.listdataset()\n\n28×4 DataFrame. Omitted printing of 1 columns │ Row │ dataset    │ description                                                                                                        │ useful                 │ │     │ String     │ String                                                                                                             │ String                 │ ├─────┼────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────────────────────┤ │ 1   │ ancova     │ Teaching method with family income as covariate                                                                    │ ANCOVA                 │ │ 2   │ anova      │ Pain threshold per hair color                                                                                      │ anova - pairwisetukey │ │ 3   │ anova2     │ Fertilizer impact on the yield of crops                                                                            │ anova                  │ ⋮ │ 25  │ rmanova2  │ Performance of employees at two time points and three areas                                                        │ rmanova2              │ │ 26  │ rmcorr    │ Repeated measurements of pH and PaCO2                                                                              │ rmcorr                │ │ 27  │ rmmissing │ Missing values in long-format repeated measures dataframe                                                          │ rmanova - rmanova2   │ │ 28  │ tips       │ One waiter recorded information about each tip he received over a period of a few months working in one restaurant │ regression             │\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.read_dataset-Tuple{String}","page":"Pingouin.jl Documentation","title":"Pingouin.read_dataset","text":"Read example datasets.\n\nParameters\n\ndname : string     Name of dataset to read (without extension).     Must be a valid dataset present in pingouin.datasets\n\nReturns\n\ndata : DataFrame     Requested dataset.\n\nExamples\n\nLoad the Penguin <https://github.com/allisonhorst/palmerpenguins>_ dataset:\n\ndata = Pingouin.read_dataset(\"penguins\")\n\n344×7 DataFrame │ Row │ species │ island │ billlengthmm │ billdepthmm │ flipperlengthmm │ bodymassg │ sex    │ │     │ String  │ String │ String         │ String        │ String            │ String      │ String │ ├─────┼─────────┼────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┤ │ 1   │ Adelie  │ Biscoe │ 37.8           │ 18.3          │ 174               │ 3400        │ female │ │ 2   │ Adelie  │ Biscoe │ 37.7           │ 18.7          │ 180               │ 3600        │ male   │ │ 3   │ Adelie  │ Biscoe │ 35.9           │ 19.2          │ 189               │ 3800        │ female │ ⋮ │ 341 │ Gentoo  │ Biscoe │ 46.8           │ 14.3          │ 215               │ 4850        │ female │ │ 342 │ Gentoo  │ Biscoe │ 50.4           │ 15.7          │ 222               │ 5750        │ male   │ │ 343 │ Gentoo  │ Biscoe │ 45.2           │ 14.8          │ 212               │ 5200        │ female │ │ 344 │ Gentoo  │ Biscoe │ 49.9           │ 16.1          │ 213               │ 5400        │ male   │\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin._transform_rm-Tuple{DataFrames.DataFrame}","page":"Pingouin.jl Documentation","title":"Pingouin._transform_rm","text":"Convert long-format dataframe (one and two-way designs). This internal function is used in Pingouin.epsilon and Pingouin.sphericity.\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.anderson-Tuple{Array{var\"#s31\",N} where N where var\"#s31\"<:Number}","page":"Pingouin.jl Documentation","title":"Pingouin.anderson","text":"Anderson-Darling test of distribution.\n\nParameters\n\nsample1, sample2,... : array_like     Array of sample data. May be different lengths. dist : Union{String, Distribution}     Distribution (\"norm\", \"expon\", \"logistic\", \"gumbel\")\n\nReturns\n\nH : boolean     True if data comes from this distribution. P : float     The significance levels for the corresponding critical values in %.     (See :HypothesisTests.OneSampleADTest for more details)\n\nExamples\n\nTest that an array comes from a normal distribution\n\nx = [2.3, 5.1, 4.3, 2.6, 7.8, 9.2, 1.4] Pingouin.anderson(x, dist=\"norm\")\n\n(false, 8.571428568870942e-5)\n\nTest that an array comes from a custom distribution\n\nx = [2.3, 5.1, 4.3, 2.6, 7.8, 9.2, 1.4] Pingouin.anderson(x, dist=Normal(1,5))\n\n(false, 0.04755873570126501)\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.epsilon-Tuple{Union{DataFrames.DataFrame, Array{var\"#s30\",N} where N where var\"#s30\"<:Number}}","page":"Pingouin.jl Documentation","title":"Pingouin.epsilon","text":"Epsilon adjustement factor for repeated measures.\n\nParameters\n\ndata : DataFrame     DataFrame containing the repeated measurements.     Only long-format dataframe are supported for this function. dv : string     Name of column containing the dependent variable. within : string     Name of column containing the within factor (only required if data     is in long format).     If within is a list with two strings, this function computes     the epsilon factor for the interaction between the two within-subject     factor. subject : string     Name of column containing the subject identifier (only required if     data is in long format). correction : string     Specify the epsilon version:\n\n* ``\"gg\"``: Greenhouse-Geisser\n* ``\"hf\"``: Huynh-Feldt\n* ``\"lb\"``: Lower bound\n\nReturns\n\neps : float     Epsilon adjustement factor.\n\nSee Also\n\nsphericity : Mauchly and JNS test for sphericity. homoscedasticity : Test equality of variance.\n\nNotes\n\nThe lower bound epsilon is:\n\n.. math:: lb = \\frac{1}{\\text{dof}},\n\nwhere the degrees of freedom :math:\\text{dof} is the number of groups :math:k minus 1 for one-way design and :math:(k_1 - 1)(k_2 - 1) for two-way design\n\nThe Greenhouse-Geisser epsilon is given by:\n\n.. math::\n\n\\epsilon_{GG} = \\frac{k^2(\\overline{\\text{diag}(S)} -\n\\overline{S})^2}{(k-1)(\\sum_{i=1}^{k}\\sum_{j=1}^{k}s_{ij}^2 -\n2k\\sum_{j=1}^{k}\\overline{s_i}^2 + k^2\\overline{S}^2)}\n\nwhere :math:S is the covariance matrix, :math:\\overline{S} the grandmean of S and :math:\\overline{\\text{diag}(S)} the mean of all the elements on the diagonal of S (i.e. mean of the variances).\n\nThe Huynh-Feldt epsilon is given by:\n\n.. math::\n\n\\epsilon_{HF} = \\frac{n(k-1)\\epsilon_{GG}-2}{(k-1)\n(n-1-(k-1)\\epsilon_{GG})}\n\nwhere :math:n is the number of observations.\n\nMissing values are automatically removed from data (listwise deletion).\n\nExamples\n\nUsing a wide-format dataframe\n\ndata = DataFrame(A = [2.2, 3.1, 4.3, 4.1, 7.2],\n\n                 B = [1.1, 2.5, 4.1, 5.2, 6.4],\n                 C = [8.2, 4.5, 3.4, 6.2, 7.2])\n\nPingouin.epsilon(data, correction=\"gg\")\n\n0.5587754577585018\n\nPingouin.epsilon(data, correction=\"hf\")\n\n0.6223448311539789\n\nPingouin.epsilon(data, correction=\"lb\")\n\n0.5\n\nNow using a long-format dataframe\n\ndata = Pingouin.readdataset(\"rmanova2\") head(data)\n\n6×4 DataFrame │ Row │ Subject │ Time   │ Metric  │ Performance │ │     │ Int64   │ String │ String  │ Int64       │ ├─────┼─────────┼────────┼─────────┼─────────────┤ │ 1   │ 1       │ Pre    │ Product │ 13          │ │ 2   │ 2       │ Pre    │ Product │ 12          │ │ 3   │ 3       │ Pre    │ Product │ 17          │ │ 4   │ 4       │ Pre    │ Product │ 12          │ │ 5   │ 5       │ Pre    │ Product │ 19          │ │ 6   │ 6       │ Pre    │ Product │ 6           │\n\nLet's first calculate the epsilon of the Time within-subject factor\n\nPingouin.epsilon(data, dv=\"Performance\", subject=\"Subject\",\n\n                 within=\"Time\")\n\n1.0\n\nSince Time has only two levels (Pre and Post), the sphericity assumption is necessarily met, and therefore the epsilon adjustement factor is 1.\n\nThe Metric factor, however, has three levels:\n\nPingouin.epsilon(data, dv=:Performance, subject=:Subject,\n\n                 within=[:Metric])\n\n0.9691029584899762\n\nThe epsilon value is very close to 1, meaning that there is no major violation of sphericity.\n\nNow, let's calculate the epsilon for the interaction between the two repeated measures factor:\n\nPingouin.epsilon(data, dv=:Performance, subject=:Subject,\n\n                 within=[:Time, :Metric])\n\n0.727166420214127\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.gzscore-Tuple{Array{var\"#s33\",N} where N where var\"#s33\"<:Number}","page":"Pingouin.jl Documentation","title":"Pingouin.gzscore","text":"Geometric standard (Z) score.\n\nParameters\n\nx : array_like     Array of raw values\n\nReturns\n\ngzscore : array_like     Array of geometric z-scores (same shape as x)\n\nNotes\n\nGeometric Z-scores are better measures of dispersion than arithmetic z-scores when the sample data come from a log-normally distributed population [1]_.\n\nGiven the raw scores :math:x, the geometric mean :math:\\mu_g and the geometric standard deviation :math:\\sigma_g, the standard score is given by the formula:\n\n.. math:: z = \\frac{log(x) - log(\\mug)}{log(\\sigmag)}\n\nReferences\n\n.. [1] https://en.wikipedia.org/wiki/Geometricstandarddeviation\n\nExamples\n\nStandardize a lognormal-distributed vector:\n\nraw = [1,4,5,4,1,2,5,8,6,6,9,8,3] z = Pingouin.gzscore(raw)\n\n13-element Array{Float64,1}:  -1.8599725059104346   0.03137685347921089   0.3358161014965816   0.03137685347921089  -1.8599725059104346   ⋮   0.5845610789821727   0.5845610789821727   1.1377453044851344   0.9770515331740336  -0.3611136007126501\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.homoscedasticity-Tuple{Any}","page":"Pingouin.jl Documentation","title":"Pingouin.homoscedasticity","text":"Test equality of variance.\n\nParameters\n----------\ndata : `DataFrame` or array\n    Iterable. Can be either an Array iterables or a wide- or long-format\n    pandas dataframe.\ndv : str\n    Dependent variable (only when ``data`` is a long-format dataframe).\ngroup : str\n    Grouping variable (only when ``data`` is a long-format dataframe).\nmethod : str\n    Statistical test. `'levene'` (default) performs the Levene test\n    and `'bartlett'` performs the Bartlett test.\n    The former is more robust to departure from normality.\nalpha : float\n    Significance level.\n\nReturns\n-------\nstats : `DataFrame`\n\n    * ``'W/T'``: Test statistic ('W' for Levene, 'T' for Bartlett)\n    * ``'pval'``: p-value\n    * ``'equal_var'``: True if ``data`` has equal variance\n\nSee Also\n--------\nnormality : Univariate normality test.\nsphericity : Mauchly's test for sphericity.\n\nNotes\n-----\nThe **Bartlett** :math:`T` statistic [1]_ is defined as:\n\n.. math::\n\n    T = \\frac{(N-k) \\ln{s^{2}_{p}} - \\sum_{i=1}^{k}(N_{i} - 1)\n    \\ln{s^{2}_{i}}}{1 + (1/(3(k-1)))((\\sum_{i=1}^{k}{1/(N_{i} - 1))}\n    - 1/(N-k))}\n\nwhere :math:`s_i^2` is the variance of the :math:`i^{th}` group,\n:math:`N` is the total sample size, :math:`N_i` is the sample size of the\n:math:`i^{th}` group, :math:`k` is the number of groups,\nand :math:`s_p^2` is the pooled variance.\n\nThe pooled variance is a weighted average of the group variances and is\ndefined as:\n\n.. math:: s^{2}_{p} = \\sum_{i=1}^{k}(N_{i} - 1)s^{2}_{i}/(N-k)\n\nThe p-value is then computed using a chi-square distribution:\n\n.. math:: T \\sim \\chi^2(k-1)\n\nThe **Levene** :math:`W` statistic [2]_ is defined as:\n\n.. math::\n\n    W = \\frac{(N-k)} {(k-1)}\n    \\frac{\\sum_{i=1}^{k}N_{i}(\\overline{Z}_{i.}-\\overline{Z})^{2} }\n    {\\sum_{i=1}^{k}\\sum_{j=1}^{N_i}(Z_{ij}-\\overline{Z}_{i.})^{2} }\n\nwhere :math:`Z_{ij} = |Y_{ij} - \\text{median}({Y}_{i.})|`,\n:math:`\\overline{Z}_{i.}` are the group means of :math:`Z_{ij}` and\n:math:`\\overline{Z}` is the grand mean of :math:`Z_{ij}`.\n\nThe p-value is then computed using a F-distribution:\n\n.. math:: W \\sim F(k-1, N-k)\n\n.. warning:: Missing values are not supported for this function.\n    Make sure to remove them before using the\n    :py:meth:`pandas.DataFrame.dropna` or :py:func:`pingouin.remove_na`\n    functions.\n\nReferences\n----------\n.. [1] Bartlett, M. S. (1937). Properties of sufficiency and statistical\n       tests. Proc. R. Soc. Lond. A, 160(901), 268-282.\n\n.. [2] Brown, M. B., & Forsythe, A. B. (1974). Robust tests for the\n       equality of variances. Journal of the American Statistical\n       Association, 69(346), 364-367.\n\nExamples\n--------\n1. Levene test on a wide-format dataframe\n\n>>> data = Pingouin.read_dataset(\"mediation\")\n>>> Pingouin.homoscedasticity(data[[\"X\", \"Y\", \"M\"]])\n1×3 DataFrame\n│ Row │ W       │ pval     │ equal_var │\n│     │ Float64 │ Float64  │ Bool      │\n├─────┼─────────┼──────────┼───────────┤\n│ 1   │ 1.17352 │ 0.310707 │ 1         │\n\n2. Bartlett test using an array of arrays\n\n>>> data = [[4, 8, 9, 20, 14], [5, 8, 15, 45, 12]]\n>>> Pingouin.homoscedasticity(data, method=\"bartlett\", α=.05)\n1×3 DataFrame\n│ Row │ T       │ pval     │ equal_var │\n│     │ Float64 │ Float64  │ Bool      │\n├─────┼─────────┼──────────┼───────────┤\n│ 1   │ 2.87357 │ 0.090045 │ 1         │\n\n3. Long-format dataframe\n\n>>> data = Pingouin.read_dataset(\"rm_anova2\")\n>>> Pingouin.homoscedasticity(data, dv=\"Performance\", group=\"Time\")\n1×3 DataFrame\n│ Row │ W       │ pval      │ equal_var │\n│     │ Float64 │ Float64   │ Bool      │\n├─────┼─────────┼───────────┼───────────┤\n│ 1   │ 3.1922  │ 0.0792169 │ 1         │\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.jarque_bera","page":"Pingouin.jl Documentation","title":"Pingouin.jarque_bera","text":"Compute the Jarque-Bera statistic to test the null hypothesis that a real-valued vector y is normally distributed.\n\n\n\n\n\n","category":"function"},{"location":"#Pingouin.normality-Tuple{Any}","page":"Pingouin.jl Documentation","title":"Pingouin.normality","text":"Univariate normality test.\n\nParameters\n----------\ndata : `DataFrame`, series, list or 1D array\n    Iterable. Can be either a single list, 1D array,\n    or a wide- or long-format dataframe.\ndv : str\n    Dependent variable (only when ``data`` is a long-format dataframe).\ngroup : str\n    Grouping variable (only when ``data`` is a long-format dataframe).\nmethod : str\n    Normality test. `'shapiro'` (default) performs the Shapiro-Wilk test\n    using the AS R94 algorithm. If the kurtosis is higher than 3, it \n    performs a Shapiro-Francia test for leptokurtic distributions.\n    Supported values: [\"shapiro\", \"jarque_bera\"].\nalpha : float64\n    Significance level.\n\nReturns\n-------\nstats : `DataFrame`\n\n    * ``'W'``: Test statistic.\n    * ``'pval'``: p-value.\n    * ``'normal'``: True if ``data`` is normally distributed.\n\nSee Also\n--------\nhomoscedasticity : Test equality of variance.\nsphericity : Mauchly's test for sphericity.\n\nNotes\n-----\nThe Shapiro-Wilk test calculates a :math:`W` statistic that tests whether a\nrandom sample :math:`x_1, x_2, ..., x_n` comes from a normal distribution.\n\nThe :math:`W` is normalized (:math:`W = (W - μ) / σ`)\n\nThe null-hypothesis of this test is that the population is normally\ndistributed. Thus, if the p-value is less than the\nchosen alpha level (typically set at 0.05), then the null hypothesis is\nrejected and there is evidence that the data tested are not normally\ndistributed.\n\nThe result of the Shapiro-Wilk test should be interpreted with caution in\nthe case of large sample sizes (>5000). Indeed, quoting from\n`Wikipedia <https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test>`_:\n\n    *\"Like most statistical significance tests, if the sample size is\n    sufficiently large this test may detect even trivial departures from\n    the null hypothesis (i.e., although there may be some statistically\n    significant effect, it may be too small to be of any practical\n    significance); thus, additional investigation of the effect size is\n    typically advisable, e.g., a Q–Q plot in this case.\"*\n\nThe Jarque-Bera statistic is to test the null hypothesis that a real-valued vector `y`\nis normally distributed. Note that the approximation by the Chi-squared distribution does\nnot work well and the speed of convergence is slow.\nIn small samples, the test tends to be over-sized for nominal levels up to about 3% and\nunder-sized for larger nominal levels (Mantalos, 2010).\n\nNote that missing values are automatically removed (casewise deletion).\n\nReferences\n----------\n* Shapiro, S. S., & Wilk, M. B. (1965). An analysis of variance test\nfor normality (complete samples). Biometrika, 52(3/4), 591-611.\n\n* Panagiotis Mantalos, 2011, \"The three different measures of the sample skewness and\nkurtosis and the effects to the Jarque-Bera test for normality\", International Journal\nof Computational Economics and Econometrics, Vol. 2, No. 1,\n[link](http://dx.doi.org/10.1504/IJCEE.2011.040576).\n\n* https://www.itl.nist.gov/div898/handbook/prc/section2/prc213.htm\n\n* [Jarque-Bera test on Wikipedia](https://en.wikipedia.org/wiki/Jarque–Bera_test)\n\nExamples\n--------\n1. Shapiro-Wilk test on a 1D array\n>>> dataset = Pingouin.read_dataset(\"anova\")\n>>> Pingouin.normality(dataset[\"Pain threshold\"])\n1×3 DataFrame\n│ Row │ W         │ pval     │ normal │\n│     │ Float64   │ Float64  │ Bool   │\n├─────┼───────────┼──────────┼────────┤\n│ 1   │ -0.842541 │ 0.800257 │ 1      │\n\n2. Wide-format dataframe using Jarque-Bera test\n\n>>> dataset = Pingouin.read_dataset(\"mediation\")\n>>> Pingouin.normality(dataset, method=\"jarque_bera\")\n│ Row │ dv     │ W        │ pval        │ normal │\n│     │ Symbol │ Float64  │ Float64     │ Bool   │\n├─────┼────────┼──────────┼─────────────┼────────┤\n│ 1   │ X      │ 1.42418  │ 0.490618    │ 1      │\n│ 2   │ M      │ 0.645823 │ 0.724038    │ 1      │\n│ 3   │ Y      │ 0.261805 │ 0.877303    │ 1      │\n│ 4   │ Mbin   │ 16.6735  │ 0.000239553 │ 0      │\n│ 5   │ Ybin   │ 16.6675  │ 0.000240265 │ 0      │\n│ 6   │ W1     │ 5.40923  │ 0.0668961   │ 1      │\n│ 7   │ W2     │ 80.6857  │ 3.01529e-18 │ 0      │\n\n3. Long-format dataframe\n\n>>> dataset = Pingouin.read_dataset(\"rm_anova2\")\n>>> Pingouin.normality(dataset, dv=:Performance, group=:Time)\n│ Row │ Time   │ W         │ pval      │ normal │\n│     │ String │ Float64   │ Float64   │ Bool   │\n├─────┼────────┼───────────┼───────────┼────────┤\n│ 1   │ Pre    │ 0.0532374 │ 0.478771  │ 1      │\n│ 2   │ Post   │ 1.30965   │ 0.0951576 │ 1      │\n\n\n\n\n\n","category":"method"},{"location":"#Pingouin.shapiro","page":"Pingouin.jl Documentation","title":"Pingouin.shapiro","text":"Compute the Shapiro-Wilk statistic to test the null hypothesis that a real-valued vector y is normally distributed.\n\n\n\n\n\n","category":"function"},{"location":"#Pingouin.sphericity-Tuple{DataFrames.DataFrame}","page":"Pingouin.jl Documentation","title":"Pingouin.sphericity","text":"Mauchly and JNS test for sphericity.\n\nParameters\n\ndata : DataFrame     DataFrame containing the repeated measurements.     Only long-format dataframe are supported for this function. dv : string     Name of column containing the dependent variable. within : string     Name of column containing the within factor.     If within is a list with two strings, this function computes     the epsilon factor for the interaction between the two within-subject     factor. subject : string     Name of column containing the subject identifier (only required if     data is in long format). method : str     Method to compute sphericity:\n\n* `'jns'`: John, Nagao and Sugiura test.\n* `'mauchly'`: Mauchly test (default).\n\nalpha : float     Significance level\n\nReturns\n\nspher : boolean     True if data have the sphericity property. W : float     Test statistic. chi2 : float     Chi-square statistic. dof : int     Degrees of freedom. pval : float     P-value.\n\nRaises\n\nValueError     When testing for an interaction, if both within-subject factors have     more than 2 levels (not yet supported in Pingouin).\n\nSee Also\n\nepsilon : Epsilon adjustement factor for repeated measures. homoscedasticity : Test equality of variance. normality : Univariate normality test.\n\nNotes\n\nThe Mauchly :math:W statistic [1]_ is defined by:\n\n.. math::\n\nW = \\frac{\\prod \\lambda_j}{(\\frac{1}{k-1} \\sum \\lambda_j)^{k-1}}\n\nwhere :math:\\lambda_j are the eigenvalues of the population covariance matrix (= double-centered sample covariance matrix) and :math:k is the number of conditions.\n\nFrom then, the :math:W statistic is transformed into a chi-square score using the number of observations per condition :math:n\n\n.. math:: f = \\frac{2(k-1)^2+k+1}{6(k-1)(n-1)} .. math:: \\chi_w^2 = (f-1)(n-1) \\text{log}(W)\n\nThe p-value is then approximated using a chi-square distribution:\n\n.. math:: \\chi_w^2 \\sim \\chi^2(\\frac{k(k-1)}{2}-1)\n\nThe JNS :math:V statistic ([2], [3], [4]_) is defined by:\n\n.. math::\n\nV = \\frac{(\\sum_j^{k-1} \\lambda_j)^2}{\\sum_j^{k-1} \\lambda_j^2}\n\n.. math:: \\chi_v^2 = \\frac{n}{2}  (k-1)^2 (V - \\frac{1}{k-1})\n\nand the p-value approximated using a chi-square distribution\n\n.. math:: \\chi_v^2 \\sim \\chi^2(\\frac{k(k-1)}{2}-1)\n\nMissing values are automatically removed from data (listwise deletion).\n\nReferences\n\n.. [1] Mauchly, J. W. (1940). Significance test for sphericity of a normal        n-variate distribution. The Annals of Mathematical Statistics,        11(2), 204-209.\n\n.. [2] Nagao, H. (1973). On some test criteria for covariance matrix.        The Annals of Statistics, 700-709.\n\n.. [3] Sugiura, N. (1972). Locally best invariant test for sphericity and        the limiting distributions. The Annals of Mathematical Statistics,        1312-1316.\n\n.. [4] John, S. (1972). The distribution of a statistic used for testing        sphericity of normal distributions. Biometrika, 59(1), 169-173.\n\nSee also http://www.real-statistics.com/anova-repeated-measures/sphericity/\n\nExamples\n\nMauchly test for sphericity using a wide-format dataframe\n\ndata = DataFrame(A = [2.2, 3.1, 4.3, 4.1, 7.2],\n\n                 B = [1.1, 2.5, 4.1, 5.2, 6.4],\n                 C = [8.2, 4.5, 3.4, 6.2, 7.2])\n\nPingouin.sphericity(data)\n\n│ Row │ spher │ W        │ chi2    │ dof     │ pval      │ │     │ Bool  │ Float64  │ Float64 │ Float64 │ Float64   │ ├─────┼───────┼──────────┼─────────┼─────────┼───────────┤ │ 1   │ 1     │ 0.210372 │ 4.67663 │ 2.0     │ 0.0964902 │\n\nJohn, Nagao and Sugiura (JNS) test\n\nPingouin.sphericity(data, method=\"jns\")[:pval]  # P-value only\n\n0.045604240307520305\n\nNow using a long-format dataframe\n\ndata = Pingouin.readdataset(\"rmanova2\") head(data)\n\n6x4 DataFrame │ Row │ Subject │ Time   │ Metric  │ Performance │ │     │ Int64   │ String │ String  │ Int64       │ ├─────┼─────────┼────────┼─────────┼─────────────┤ │ 1   │ 1       │ Pre    │ Product │ 13          │ │ 2   │ 2       │ Pre    │ Product │ 12          │ │ 3   │ 3       │ Pre    │ Product │ 17          │ │ 4   │ 4       │ Pre    │ Product │ 12          │ │ 5   │ 5       │ Pre    │ Product │ 19          │ │ 6   │ 6       │ Pre    │ Product │ 6           │\n\nLet's first test sphericity for the Time within-subject factor\n\nPingouin.sphericity(data, dv=:Performance, subject=:Subject,\n\n                    within=:Time)\n\n│ Row │ spher │ W       │ chi2    │ dof   │ pval    │ │     │ Bool  │ Float64 │ Float64 │ Int64 │ Float64 │ ├─────┼───────┼─────────┼─────────┼───────┼─────────┤ │ 1   │ 1     │ NaN     │ NaN     │ 1     │ 1.0     │\n\nSince Time has only two levels (Pre and Post), the sphericity assumption is necessarily met.\n\nThe Metric factor, however, has three levels:\n\nPingouin.sphericity(data, dv=\"Performance\", subject=\"Subject\",\n\n                    within=[\"Metric\"])[:pval]\n\n0.8784417991645139\n\nThe p-value value is very large, and the test therefore indicates that there is no violation of sphericity.\n\nNow, let's calculate the epsilon for the interaction between the two repeated measures factor. The current implementation in Pingouin only works if at least one of the two within-subject factors has no more than two levels.\n\nPingouin.sphericity(data, dv=\"Performance\",\n\n                    subject=\"Subject\",\n                    within=[\"Time\", \"Metric\"])\n\n│ Row │ spher │ W        │ chi2    │ dof     │ pval     │ │     │ Bool  │ Float64  │ Float64 │ Float64 │ Float64  │ ├─────┼───────┼──────────┼─────────┼─────────┼──────────┤ │ 1   │ 1     │ 0.624799 │ 3.7626  │ 2.0     │ 0.152392 │\n\nHere again, there is no violation of sphericity acccording to Mauchly's test.\n\n\n\n\n\n","category":"method"}]
}
